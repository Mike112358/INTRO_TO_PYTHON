#Задание 1
'''
Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
'''
lis = ['cat', 213, None, 23.6]
i = 0
for el in lis:
    print(f"An element {el} has type {type(el)}")


#Задание 2
'''
Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. 
При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input()
'''
t = input("Enter elements of list:")
lis = list(t)
l = len(lis)
#print(lis)

for i in range(0,l-1,2):
    t = lis[i]
    lis[i]=lis[i+1]
    lis[i+1]=t
print(lis)


#Задание 3
'''
Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и через dict
'''
##Решение с помощью list
seasons = ['зима', 'весна', 'лето', 'осень']
t = int(input("Enter the number:"))
if t in (12,1,2):
    print(seasons[0])
elif t in (3,4,5):
    print(seasons[1])
elif t in (6,7,8):
    print(seasons[2])
else:
    print(seasons[3])

##Решение с помощью dict
month = int(input("Enter the month:"))
dictr = {1:'Зима', 12:'Зима',2:'Зима',3:'Весна',4:'Весна',5:'Весна',6:'Лето',7:'Лето',8:'Лето',  9:'Осень', 10:'Осень',11:'Осень'}

print(dictr.get(month))


#Задание 4
'''
 Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
 Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
'''
t = input("Enter your string:")
lis = list(t.split())
i=1
for item in lis:
    if len(item)>=10:
        print(i,item[:10])
    else:
        print(i,item)
    i+=1


#Задание 5
'''
Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
'''

lis = [7, 5, 5, 3, 3, 3, 3, 2]
t = int(input("Enter new element:"))
cnt = lis.count(t)
l = len(lis)
if t >=lis[0]:
    lis.reverse()
    lis.append(t)
    lis.reverse()
elif t<=lis[l-1]:
    lis.append(t)
elif cnt>1:
    pos = lis.index(t)
    lis.insert(pos+cnt,t)
print(lis)


#Задание 6
'''
* Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами 
(характеристиками товара: название, цена, количество, единица измерения). 
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя
'''
##Решил реализвать возможность добавления неограниченного количества товаров в структуру,
# для этого дополнительно у пользователя после первого внесения спрашивается нужно ли добавить элемент в структуру.
general_list = []
t = (1,{"название": input("Enter the name:"), "цена": int(input("Enter the price:")),"количество": int(input("Enter quantity of goods:")),"ед":input("Enter units:") })
general_list.append(t)
i=2
while True:
    add_item = input("Добавить элемент в структуру: ")
    if add_item == 'y':
        t = {"название": input("Enter the name:"), "цена": int(input("Enter the price:")),
             "количество": int(input("Enter quantity of goods:")), "ед": input("Enter units:")}
        general_list.append((i, t))
    else:
        break


##Реализуем сбор аналитики
analytics = {}
name_list = []
price_list = []
quantity_list = []
unit_list = []
for item in general_list:
    dict = item[1]
    name_list.append(dict.get("название"))
    price_list.append(dict.get("цена"))
    quantity_list.append(dict.get("количество"))
    unit_list.append(dict.get("ед"))

analytics={"название":name_list,"цена":price_list, "количество":quantity_list,"ед":unit_list}
print(analytics)