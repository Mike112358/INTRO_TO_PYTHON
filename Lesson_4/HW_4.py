#Задача 1
'''
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''
##Чтобы завпустить нужно поместить в отдельный py-файл,
## но чтобы все было эстетично и удобно для проверки поместил с остальными задачами.
from sys import argv
_, hours, rate, award = argv

def salary_func():
    return f"Your salary is {int(hours)*int(rate)+int(award)}"

print(salary_func())


#Задача 2
'''
Представлен список чисел. 
Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
'''
l = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
lis = [l[i+1] for i in range(len(l)-1) if l[i+1]>l[i]]
print(lis)


#Задача_3
'''
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку
'''
print([i for i in list(range(20,241)) if (i%20==0 or i%21==0) ])

#Задача 4
'''
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор
'''
lis = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

peace = [item for item in lis if lis.count(item)==1]
print(peace)


#Задача 5
'''
Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка
'''
from functools import reduce
print(reduce((lambda x, y: x*y), [item for item in list(range(100,1001)) if item%2 ==0]))


#Задача 6
'''
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено
'''
#6.a
from itertools import count, cycle
for item in count(3):
    if item>10:
        break
    else:
        print(item)

#6.b
lis = [1,1,2,3,5,8,13,21,34]
c = 0
for item in cycle(lis):
    if c>20:
        break
    print(item)
    c+=1

#Задача 7
'''
 Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
 При вызове функции должен создаваться объект-генератор. 
 Функция должна вызываться следующим образом: for el in fact(n). 
 Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!
'''
#Ради практики напишу сам функцию, которая считает факториал числа
def fact(n):
    res = []
    a = 1
    for i in range(1,n+1):
        a*=i
        yield a
s = fact(5)

for el in fact(7):
    print(el)

###Прикольная штука этот YIELD.





